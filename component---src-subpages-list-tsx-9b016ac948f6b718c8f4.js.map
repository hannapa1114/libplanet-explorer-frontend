{"version":3,"sources":["webpack:///./src/subpages/list.tsx","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx","webpack:///./src/components/Timestamp.tsx","webpack:///./src/components/List.tsx","webpack:///./src/components/OffsetSwitch.tsx","webpack:///./src/misc/columns.tsx","webpack:///./src/misc/useOffset.ts","webpack:///./src/misc/useSearchParams.ts"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_fluentui_react__WEBPACK_IMPORTED_MODULE_2__","_generated_graphql__WEBPACK_IMPORTED_MODULE_3__","_misc_useOffset__WEBPACK_IMPORTED_MODULE_4__","_misc_columns__WEBPACK_IMPORTED_MODULE_5__","_components_List__WEBPACK_IMPORTED_MODULE_6__","_components_OffsetSwitch__WEBPACK_IMPORTED_MODULE_7__","ListPage","_ref","location","_useOffset","useOffset","offset","olderHandler","newerHandler","_useState","useState","excludeEmptyTxs","setExcludeEmptyTxs","a","createElement","label","checked","onChange","variables","limit","pollInterval","_ref2","data","loading","error","console","message","blocks","blockQuery","Fragment","SummaryCards","disable","older","newer","BlockList","columns","mainMineColumns","_ref3","Cards","interval","difficultyAverage","totalTxNumber","timestamps","map","block","Date","timestamp","i","length","difficulties","difficulty","reduce","d","sum","transactions","b","_ref4","className","key","Math","floor","toLocaleString","_ref5","items","onItemInvoked","navigate","hash","useQueryString","useMemo","search","substr","useCallback","queryString","path","pathname","withPrefix","BlockCommonFragmentDoc","gql","_templateObject","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","Object","assign","query","BlockByHashDocument","_templateObject4","BlockByHashComponent","_templateObject5","TransactionByIdDocument","_templateObject6","TransactionByIdComponent","TransactionsByAccountDocument","_templateObject7","TransactionsByAccountComponent","formatOptions","hour","minute","year","month","day","Timestamp","date","now","getFullYear","getMonth","getDate","timeStyle","_objectWithoutPropertiesLoose","react__WEBPACK_IMPORTED_MODULE_4___default","dateTime","toISOString","title","undefined","_fluentui_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_1__","_fluentui_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_2__","_fluentui_react_lib_ShimmeredDetailsList__WEBPACK_IMPORTED_MODULE_3__","List","notFoundMessage","setKey","selectionMode","SelectionMode","none","layoutMode","DetailsListLayoutMode","justified","isHeaderVisible","enableShimmer","OffsetSwitch","onClick","disabled","css","commonProps","isRowHeader","isResizable","isSorted","name","fieldName","iconName","isIconOnly","minWidth","maxWidth","isSortedDescending","isPadded","onRender","index","react__WEBPACK_IMPORTED_MODULE_2___default","Number","_fluentui_react__WEBPACK_IMPORTED_MODULE_3__","href","_components_Timestamp__WEBPACK_IMPORTED_MODULE_4__","miner","_ref6","previousBlock","beforeTimestamp","parse","nowTimestamp","_ref7","accountMineColumns","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","txColumns","_ref15","id","_ref16","signer","_ref17","keyName","_useSearchParams","_useQueryString","setQueryString","querystring","searchParams","stringify","useSearchParams","setSearchParams","setOffset"],"mappings":"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","file":"component---src-subpages-list-tsx-9b016ac948f6b718c8f4.js","sourcesContent":["import React, { useState } from 'react';\nimport { navigate } from 'gatsby';\n\nimport { Checkbox } from '@fluentui/react';\n\nimport { Block, BlockListComponent } from '../generated/graphql';\n\nimport useOffset, { limit } from '../misc/useOffset';\nimport { mainMineColumns } from '../misc/columns';\n\nimport List, { BlockListProps } from '../components/List';\nimport OffsetSwitch from '../components/OffsetSwitch';\n\nimport { IndexPageProps } from '../pages/index';\n\ntype ListPageProps = IndexPageProps;\n\nconst POLL_INTERVAL = 2000;\n\nconst ListPage: React.FC<ListPageProps> = ({ location }) => {\n  const [offset, olderHandler, newerHandler] = useOffset(location);\n  const [excludeEmptyTxs, setExcludeEmptyTxs] = useState(false);\n  return (\n    <main>\n      <Checkbox\n        label=\"Include blocks having any tx\"\n        checked={excludeEmptyTxs}\n        onChange={() => setExcludeEmptyTxs(!excludeEmptyTxs)}\n      />\n      <BlockListComponent\n        variables={{ offset, limit, excludeEmptyTxs }}\n        pollInterval={POLL_INTERVAL}>\n        {({ data, loading, error }) => {\n          if (error) {\n            console.error(error);\n            return <p>{error.message}</p>;\n          }\n          const blocks =\n            data && data.blockQuery && data.blockQuery.blocks\n              ? (data.blockQuery.blocks as Block[])\n              : null;\n\n          return (\n            <>\n              <SummaryCards blocks={blocks} />\n              <OffsetSwitch\n                olderHandler={olderHandler}\n                newerHandler={newerHandler}\n                disable={{ older: loading, newer: loading || offset < 1 }}\n              />\n              <BlockList\n                blocks={blocks}\n                loading={loading}\n                columns={mainMineColumns}\n              />\n            </>\n          );\n        }}\n      </BlockListComponent>\n    </main>\n  );\n};\n\nexport default ListPage;\n\nexport interface SummaryCardsProps {\n  blocks: Block[] | null;\n}\n\nconst SummaryCards: React.FC<SummaryCardsProps> = ({ blocks }) => {\n  if (blocks === null)\n    return <Cards interval={0} difficultyAverage={0} totalTxNumber={0} />;\n\n  const timestamps: Date[] = blocks.map(block => new Date(block.timestamp));\n\n  let interval = 0;\n  for (let i = 0; i < timestamps.length - 1; i++) {\n    interval += +timestamps[i] - +timestamps[i + 1];\n  }\n  interval /= (timestamps.length - 1) * 1000;\n\n  const difficulties = blocks.map(block => block.difficulty);\n  const difficultyAverage =\n    difficulties.reduce((d, sum) => d + sum, 0) / difficulties.length;\n\n  const txNumbers = blocks.map(block => block.transactions.length);\n  const totalTxNumber = txNumbers.reduce((a, b) => a + b, 0);\n  return (\n    <Cards\n      interval={interval}\n      difficultyAverage={difficultyAverage}\n      totalTxNumber={totalTxNumber}\n    />\n  );\n};\n\ninterface CardsProps {\n  interval: number;\n  difficultyAverage: number;\n  totalTxNumber: number;\n}\n\nconst Cards: React.FC<CardsProps> = ({\n  interval,\n  difficultyAverage,\n  totalTxNumber,\n}) => (\n  <div className=\"cards\">\n    <div className=\"card\" key=\"interval\">\n      <strong>{interval}</strong> sec\n      <p>Average interval in this page</p>\n    </div>\n    <div className=\"card\" key=\"difficultyAverage\">\n      <strong>{Math.floor(difficultyAverage).toLocaleString()}</strong>\n      <p>Average difficulty in this page</p>\n    </div>\n    <div className=\"card\" key=\"total-tx-number\">\n      <strong>{Math.floor(totalTxNumber).toLocaleString()}</strong>\n      <p>Total txs in this page</p>\n    </div>\n  </div>\n);\n\nconst BlockList: React.FC<BlockListProps> = ({ blocks, loading, columns }) => {\n  return (\n    <List\n      items={blocks}\n      loading={loading}\n      columns={columns}\n      onItemInvoked={block => navigate(`/search/?${block.hash}`)}\n    />\n  );\n};\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback(\n    (queryString: string) => {\n      const path = location.pathname.substr(withPrefix('/').length - 1);\n      navigate(path + (queryString ? `?${queryString}` : ''));\n    },\n    [location, navigate]\n  );\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Address: any,\n  ByteString: any,\n  DateTimeOffset: any,\n  Date: any,\n  DateTime: any,\n  Decimal: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport type Action = {\n   __typename?: 'Action',\n  inspection: Scalars['String'],\n  raw: Scalars['String'],\n};\n\n\nexport type ActionRawArgs = {\n  encode?: Maybe<Scalars['String']>\n};\n\n\nexport type Block = {\n   __typename?: 'Block',\n  difficulty: Scalars['Int'],\n  hash: Scalars['ID'],\n  index: Scalars['Int'],\n  miner: Scalars['Address'],\n  nonce: Scalars['ByteString'],\n  previousBlock?: Maybe<Block>,\n  stateRootHash?: Maybe<Scalars['ByteString']>,\n  timestamp: Scalars['DateTimeOffset'],\n  transactions: Array<Transaction>,\n};\n\nexport type BlockQuery = {\n   __typename?: 'BlockQuery',\n  block?: Maybe<Block>,\n  blocks: Array<Block>,\n};\n\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>,\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>,\n  miner?: Maybe<Scalars['Address']>\n};\n\n\n\n\n\n\n\nexport type Query = {\n   __typename?: 'Query',\n  blockQuery?: Maybe<BlockQuery>,\n  transactionQuery?: Maybe<TransactionQuery>,\n};\n\n\nexport type Transaction = {\n   __typename?: 'Transaction',\n  actions: Array<Action>,\n  blockRef?: Maybe<Array<Block>>,\n  id: Scalars['ID'],\n  nonce: Scalars['Int'],\n  publicKey: Scalars['ByteString'],\n  signature: Scalars['ByteString'],\n  signer: Scalars['Address'],\n  timestamp: Scalars['DateTimeOffset'],\n  updatedAddresses: Array<Scalars['Address']>,\n};\n\nexport type TransactionQuery = {\n   __typename?: 'TransactionQuery',\n  transaction?: Maybe<Transaction>,\n  transactions: Array<Transaction>,\n};\n\n\nexport type TransactionQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionQueryTransactionsArgs = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\nexport type BlockCommonFragment = ({ __typename?: 'Block' } & Pick<Block, 'hash' | 'index' | 'difficulty' | 'timestamp'>);\n\nexport type TransactionCommonFragment = ({ __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'nonce' | 'publicKey' | 'signature' | 'signer' | 'timestamp' | 'updatedAddresses'>);\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'],\n  limit: Scalars['Int'],\n  excludeEmptyTxs: Scalars['Boolean'],\n  miner?: Maybe<Scalars['Address']>\n};\n\n\nexport type BlockListQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { blocks: Array<({ __typename?: 'Block' } & Pick<Block, 'miner'> & { previousBlock: Maybe<({ __typename?: 'Block' } & Pick<Block, 'timestamp'>)>, transactions: Array<({ __typename?: 'Transaction' } & Pick<Transaction, 'id'>)> } & BlockCommonFragment)> })> });\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockByHashQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { block: Maybe<({ __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce' | 'stateRootHash'> & { previousBlock: Maybe<({ __typename?: 'Block' } & Pick<Block, 'hash'>)>, transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> } & BlockCommonFragment)> })> });\n\nexport type TransactionListQueryVariables = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc: Scalars['Boolean'],\n  offset: Scalars['Int'],\n  limit: Scalars['Int']\n};\n\n\nexport type TransactionListQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionByIdQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transaction: Maybe<({ __typename?: 'Transaction' } & { actions: Array<({ __typename?: 'Action' } & Pick<Action, 'raw'>)>, blockRef: Maybe<Array<({ __typename?: 'Block' } & BlockCommonFragment)>> } & TransactionCommonFragment)> })> });\n\nexport type TransactionsByAccountQueryVariables = {\n  involvedAddress: Scalars['Address'],\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\n\n\nexport type TransactionsByAccountQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\nexport const BlockCommonFragmentDoc = gql`\n    fragment BlockCommon on Block {\n  hash\n  index\n  difficulty\n  timestamp\n}\n    `;\nexport const TransactionCommonFragmentDoc = gql`\n    fragment TransactionCommon on Transaction {\n  id\n  nonce\n  publicKey\n  signature\n  signer\n  timestamp\n  updatedAddresses\n}\n    `;\nexport const BlockListDocument = gql`\n    query BlockList($offset: Int!, $limit: Int!, $excludeEmptyTxs: Boolean!, $miner: Address) {\n  blockQuery {\n    blocks(desc: true, offset: $offset, limit: $limit, excludeEmptyTxs: $excludeEmptyTxs, miner: $miner) {\n      ...BlockCommon\n      miner\n      previousBlock {\n        timestamp\n      }\n      transactions {\n        id\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockListQuery, BlockListQueryVariables>, 'query'> & ({ variables: BlockListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const BlockListComponent = (props: BlockListComponentProps) => (\n      <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables> query={BlockListDocument} {...props} />\n    );\n    \nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockListQuery, BlockListQueryVariables> & TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockListQuery,\n  BlockListQueryVariables,\n  BlockListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockListQuery, BlockListQueryVariables, BlockListProps<TChildProps>>(BlockListDocument, {\n      alias: 'withBlockList',\n      ...operationOptions\n    });\n};\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<BlockListQuery, BlockListQueryVariables>;\nexport const BlockByHashDocument = gql`\n    query BlockByHash($hash: ID) {\n  blockQuery {\n    block(hash: $hash) {\n      ...BlockCommon\n      miner\n      nonce\n      stateRootHash\n      previousBlock {\n        hash\n      }\n      transactions {\n        ...TransactionCommon\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}\n${TransactionCommonFragmentDoc}`;\nexport type BlockByHashComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockByHashQuery, BlockByHashQueryVariables>, 'query'>;\n\n    export const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n      <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables> query={BlockByHashDocument} {...props} />\n    );\n    \nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockByHashQuery, BlockByHashQueryVariables> & TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockByHashQuery,\n  BlockByHashQueryVariables,\n  BlockByHashProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockByHashQuery, BlockByHashQueryVariables, BlockByHashProps<TChildProps>>(BlockByHashDocument, {\n      alias: 'withBlockByHash',\n      ...operationOptions\n    });\n};\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<BlockByHashQuery, BlockByHashQueryVariables>;\nexport const TransactionListDocument = gql`\n    query TransactionList($signer: Address, $involvedAddress: Address, $desc: Boolean!, $offset: Int!, $limit: Int!) {\n  transactionQuery {\n    transactions(signer: $signer, involvedAddress: $involvedAddress, desc: $desc, offset: $offset, limit: $limit) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionListQuery, TransactionListQueryVariables>, 'query'> & ({ variables: TransactionListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TransactionListComponent = (props: TransactionListComponentProps) => (\n      <ApolloReactComponents.Query<TransactionListQuery, TransactionListQueryVariables> query={TransactionListDocument} {...props} />\n    );\n    \nexport type TransactionListProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionListQuery, TransactionListQueryVariables> & TChildProps;\nexport function withTransactionList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionListQuery,\n  TransactionListQueryVariables,\n  TransactionListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionListQuery, TransactionListQueryVariables, TransactionListProps<TChildProps>>(TransactionListDocument, {\n      alias: 'withTransactionList',\n      ...operationOptions\n    });\n};\nexport type TransactionListQueryResult = ApolloReactCommon.QueryResult<TransactionListQuery, TransactionListQueryVariables>;\nexport const TransactionByIdDocument = gql`\n    query TransactionById($id: ID) {\n  transactionQuery {\n    transaction(id: $id) {\n      ...TransactionCommon\n      actions {\n        raw(encode: \"base64\")\n      }\n      blockRef {\n        ...BlockCommon\n      }\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}\n${BlockCommonFragmentDoc}`;\nexport type TransactionByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionByIdQuery, TransactionByIdQueryVariables>, 'query'>;\n\n    export const TransactionByIdComponent = (props: TransactionByIdComponentProps) => (\n      <ApolloReactComponents.Query<TransactionByIdQuery, TransactionByIdQueryVariables> query={TransactionByIdDocument} {...props} />\n    );\n    \nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionByIdQuery, TransactionByIdQueryVariables> & TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables,\n  TransactionByIdProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionByIdQuery, TransactionByIdQueryVariables, TransactionByIdProps<TChildProps>>(TransactionByIdDocument, {\n      alias: 'withTransactionById',\n      ...operationOptions\n    });\n};\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<TransactionByIdQuery, TransactionByIdQueryVariables>;\nexport const TransactionsByAccountDocument = gql`\n    query TransactionsByAccount($involvedAddress: Address!, $offset: Int, $limit: Int) {\n  transactionQuery {\n    transactions(involvedAddress: $involvedAddress, desc: true, offset: $offset, limit: $limit) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionsByAccountComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>, 'query'> & ({ variables: TransactionsByAccountQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TransactionsByAccountComponent = (props: TransactionsByAccountComponentProps) => (\n      <ApolloReactComponents.Query<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> query={TransactionsByAccountDocument} {...props} />\n    );\n    \nexport type TransactionsByAccountProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> & TChildProps;\nexport function withTransactionsByAccount<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables,\n  TransactionsByAccountProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionsByAccountQuery, TransactionsByAccountQueryVariables, TransactionsByAccountProps<TChildProps>>(TransactionsByAccountDocument, {\n      alias: 'withTransactionsByAccount',\n      ...operationOptions\n    });\n};\nexport type TransactionsByAccountQueryResult = ApolloReactCommon.QueryResult<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>;","import { Scalars } from '../generated/graphql';\nimport React from 'react';\n\ninterface TimestampProps {\n  timestamp: Scalars['DateTimeOffset'];\n}\n\nconst formatOptions: Intl.DateTimeFormatOptions = {\n  hour: '2-digit',\n  minute: '2-digit',\n  year: '2-digit',\n  month: 'numeric',\n  day: 'numeric',\n};\n\nconst Timestamp: React.FC<TimestampProps> = ({ timestamp }) => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  if (\n    now.getFullYear() == date.getFullYear() &&\n    now.getMonth() == date.getMonth() &&\n    now.getDate() == date.getDate()\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { year, month, day, ...timeStyle } = formatOptions;\n    return (\n      <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n        {date.toLocaleString(undefined, timeStyle)}\n      </time>\n    );\n  }\n  return (\n    <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n      {date.toLocaleString(undefined, formatOptions)}\n    </time>\n  );\n};\n\nexport default Timestamp;\n","import React from 'react';\nimport {\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n} from '@fluentui/react/lib/DetailsList';\nimport { ShimmeredDetailsList } from '@fluentui/react/lib/ShimmeredDetailsList';\nimport { Block } from '../generated/graphql';\n\ninterface ListProps {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  items: any[] | null;\n  loading: boolean;\n  columns: IColumn[];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onItemInvoked: (item: any) => void;\n  notFoundMessage?: string;\n}\n\nconst List: React.FC<ListProps> = ({\n  items,\n  loading,\n  columns,\n  onItemInvoked,\n  notFoundMessage,\n}) => {\n  if (!loading && notFoundMessage && items && items.length === 0)\n    return <p>{notFoundMessage}</p>;\n  return (\n    <ShimmeredDetailsList\n      setKey=\"set\"\n      items={items === null || loading ? [] : items}\n      columns={columns}\n      selectionMode={SelectionMode.none}\n      layoutMode={DetailsListLayoutMode.justified}\n      isHeaderVisible={true}\n      enableShimmer={loading}\n      onItemInvoked={onItemInvoked}\n    />\n  );\n};\n\nexport default List;\n\nexport type OmitListProps = Omit<ListProps, 'onItemInvoked' | 'items'>;\n\nexport interface BlockListProps extends OmitListProps {\n  blocks: Block[] | null;\n}\n","import React from 'react';\n\nimport { css } from 'emotion';\nimport { DefaultButton } from '@fluentui/react';\n\ninterface OffsetSwitchProps {\n  newerHandler?: () => void;\n  olderHandler?: () => void;\n  disable: { older: boolean; newer: boolean };\n}\n\nconst OffsetSwitch: React.FC<OffsetSwitchProps> = ({\n  newerHandler,\n  olderHandler,\n  disable,\n}) => (\n  <div className=\"nav\">\n    <DefaultButton\n      onClick={newerHandler}\n      disabled={disable.newer}\n      className={css`\n        margin-right: 5px;\n      `}>\n      &larr; Newer\n    </DefaultButton>\n    <DefaultButton disabled={disable.older} onClick={olderHandler}>\n      Older &rarr;\n    </DefaultButton>\n  </div>\n);\n\nexport default OffsetSwitch;\n","import React from 'react';\nimport { Link } from '@fluentui/react';\n\nimport Timestamp from '../components/Timestamp';\nimport { Block, Transaction } from '../generated/graphql';\n\nexport const commonProps = {\n  isRowHeader: true,\n  isResizable: true,\n  isSorted: false,\n};\n\nexport const mainMineColumns = [\n  {\n    key: 'columnIndex',\n    name: 'Index',\n    fieldName: 'index',\n    iconName: 'NumberSymbol',\n    isIconOnly: true,\n    minWidth: 5,\n    maxWidth: 50,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ index }: Block) => <>{Number(index).toLocaleString()}</>,\n  },\n  {\n    key: 'columnHash',\n    name: 'Block Hash',\n    fieldName: 'hash',\n    minWidth: 5,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ hash }: Block) => (\n      <Link href={`./block/?${hash}`}>{hash}</Link>\n    ),\n  },\n  {\n    key: 'columnTimestamp',\n    name: 'Timestamp',\n    fieldName: 'timestamp',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ timestamp }: Block) => <Timestamp timestamp={timestamp} />,\n  },\n  {\n    key: 'columnMiner',\n    name: 'Miner',\n    fieldName: 'miner',\n    minWidth: 123,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ miner }: Block) => (\n      <Link href={`./account/?${miner}`}>{miner}</Link>\n    ),\n  },\n  {\n    key: 'columnDifficulty',\n    name: 'Difficulty',\n    minWidth: 50,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ difficulty }: Block) => (\n      <>{Math.floor(difficulty).toLocaleString()}</>\n    ),\n  },\n  {\n    key: 'columnTimeTaken',\n    name: 'Time Taken',\n    minWidth: 50,\n    maxWidth: 200,\n    ...commonProps,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ timestamp, previousBlock }: Block) => {\n      if (previousBlock === null || previousBlock === undefined) {\n        return <>{0}</>;\n      }\n      const beforeTimestamp = Date.parse(previousBlock.timestamp);\n      const nowTimestamp = Date.parse(timestamp);\n      return <>{(nowTimestamp - beforeTimestamp) / 1000}</>;\n    },\n  },\n  {\n    key: 'columnTxNumber',\n    name: 'Tx #',\n    minWidth: 5,\n    maxWidth: 40,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ transactions }: Block) => <>{transactions.length}</>,\n  },\n];\n\nexport const accountMineColumns = [\n  {\n    key: 'columnIndex',\n    name: 'Index',\n    fieldName: 'index',\n    iconName: 'NumberSymbol',\n    isIconOnly: true,\n    minWidth: 5,\n    maxWidth: 50,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ index }: Block) => <>{Number(index).toLocaleString()}</>,\n  },\n  {\n    key: 'columnHash',\n    name: 'Block Hash',\n    fieldName: 'hash',\n    minWidth: 5,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ hash }: Block) => (\n      <Link href={`../block/?${hash}`}>{hash}</Link>\n    ),\n  },\n  {\n    key: 'columnTimestamp',\n    name: 'Timestamp',\n    fieldName: 'timestamp',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ timestamp }: Block) => <Timestamp timestamp={timestamp} />,\n  },\n  {\n    key: 'columnMiner',\n    name: 'Miner',\n    fieldName: 'miner',\n    minWidth: 123,\n    maxWidth: 450,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ miner }: Block) => (\n      <Link href={`../account/?${miner}`}>{miner}</Link>\n    ),\n  },\n  {\n    key: 'columnDifficulty',\n    name: 'Difficulty',\n    minWidth: 50,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ difficulty }: Block) => (\n      <>{Math.floor(difficulty).toLocaleString()}</>\n    ),\n  },\n  {\n    key: 'columnTimeTaken',\n    name: 'Time Taken',\n    minWidth: 50,\n    maxWidth: 200,\n    ...commonProps,\n    data: 'string',\n    isPadded: true,\n    onRender: ({ timestamp, previousBlock }: Block) => {\n      if (previousBlock === null || previousBlock === undefined) {\n        return <>{0}</>;\n      }\n      const beforeTimestamp = Date.parse(previousBlock.timestamp);\n      const nowTimestamp = Date.parse(timestamp);\n      return <>{(nowTimestamp - beforeTimestamp) / 1000}</>;\n    },\n  },\n  {\n    key: 'columnTxNumber',\n    name: 'Tx #',\n    minWidth: 5,\n    maxWidth: 40,\n    ...commonProps,\n    isSortedDescending: false,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ transactions }: Block) => <>{transactions.length}</>,\n  },\n];\n\nexport const txColumns = [\n  {\n    key: 'columnNonce',\n    name: 'Nonce',\n    fieldName: 'nonce',\n    minWidth: 5,\n    maxWidth: 50,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'string',\n    isPadded: true,\n  },\n  {\n    key: 'columnId',\n    name: 'ID',\n    fieldName: 'id',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n    // FIXME: We'd better to use absolute paths and make Gatsby automatically\n    // to rebase these absolute paths on the PATH_PREFIX configuration.\n    onRender: ({ id }: Transaction) => (\n      <Link href={`../transaction/?${id}`}>{id}</Link>\n    ),\n  },\n  {\n    key: 'columnSignature',\n    name: 'Signature',\n    fieldName: 'signature',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n  },\n  {\n    key: 'columnSigner',\n    name: 'Signer',\n    fieldName: 'signer',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ signer }: Transaction) => (\n      // FIXME: We'd better to use absolute paths and make Gatsby automatically\n      // to rebase these absolute paths on the PATH_PREFIX configuration.\n      <Link href={`./?${signer}`}>{signer}</Link>\n    ),\n  },\n  {\n    key: 'columnTimestamp',\n    name: 'Timestamp',\n    fieldName: 'timestamp',\n    minWidth: 100,\n    maxWidth: 200,\n    ...commonProps,\n    isSortedDescending: true,\n    data: 'number',\n    isPadded: true,\n    onRender: ({ timestamp }: Transaction) => (\n      <Timestamp timestamp={timestamp} />\n    ),\n  },\n];\n","import useSearchParams from './useSearchParams';\n\nexport const limit = 21;\nexport default function useOffset(location: Location, keyName = 'offset') {\n  const [searchParams, setSearchParams] = useSearchParams(location);\n  const offset = keyName in searchParams ? searchParams[keyName] : 0;\n  const setOffset = (offset: number) => {\n    if (offset < 1) {\n      delete searchParams[keyName];\n      setSearchParams(searchParams);\n    } else {\n      searchParams[keyName] = offset;\n      setSearchParams(searchParams);\n    }\n  };\n  const olderHandler = () => {\n    setOffset(+offset + limit);\n  };\n  const newerHandler = () => {\n    setOffset(+offset - limit);\n  };\n  return [offset, olderHandler, newerHandler] as const;\n}\n","import querystring from 'querystring';\nimport useQueryString from './useQueryString';\n\nexport default function useSearchParams(location: Location) {\n  const [queryString, setQueryString] = useQueryString(location);\n  const searchParams = querystring.parse(queryString);\n  const setSearchParams = (searchParams: object) =>\n    setQueryString(querystring.stringify(searchParams));\n  return [searchParams, setSearchParams] as const;\n}\n"],"sourceRoot":""}