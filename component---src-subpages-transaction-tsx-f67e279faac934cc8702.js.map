{"version":3,"sources":["webpack:///./src/subpages/transaction.tsx","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx","webpack:///./src/components/Timestamp.tsx"],"names":["convertToObject","value","Map","Object","fromEntries","Array","from","map","v","Uint8Array","toString","Number","jsonTreeTheme","scheme","author","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","TransactionPage","_ref","location","id","useQueryString","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","_generated_graphql__WEBPACK_IMPORTED_MODULE_11__","variables","_ref2","data","loading","error","Fragment","JSON","stringify","message","transaction","transactionQuery","blockRef","block","key","hash","_fluentui_react__WEBPACK_IMPORTED_MODULE_12__","href","actions","action","raw","react_json_tree__WEBPACK_IMPORTED_MODULE_15___default","decode","Buffer","theme","invertTheme","hideRoot","signerLink","signer","nonce","publicKey","signature","_components_Timestamp__WEBPACK_IMPORTED_MODULE_13__","timestamp","updatedAddresses","address","useMemo","search","substr","useCallback","queryString","path","pathname","withPrefix","length","navigate","BlockCommonFragmentDoc","gql","_templateObject","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","assign","query","BlockByHashDocument","_templateObject4","BlockByHashComponent","_templateObject5","TransactionByIdDocument","_templateObject6","TransactionByIdComponent","TransactionsByAccountDocument","_templateObject7","TransactionsByAccountComponent","formatOptions","hour","minute","year","month","day","Timestamp","date","Date","now","getFullYear","getMonth","getDate","timeStyle","_objectWithoutPropertiesLoose","react__WEBPACK_IMPORTED_MODULE_4___default","dateTime","toISOString","title","toLocaleString","undefined"],"mappings":"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","file":"component---src-subpages-transaction-tsx-f67e279faac934cc8702.js","sourcesContent":["import React from 'react';\nimport useQueryString from '../misc/useQueryString';\nimport { TransactionByIdComponent } from '../generated/graphql';\nimport { Link } from '@fluentui/react';\nimport Timestamp from '../components/Timestamp';\nimport { decode, BencodexValue } from 'bencodex';\nimport JSONTree from 'react-json-tree';\n\ninterface TransactionPageProps {\n  location: Location;\n}\n\n// FIXME: do not use any type.\nfunction convertToObject(value: BencodexValue | undefined): any {\n  if (value instanceof Map) {\n    return Object.fromEntries(\n      Array.from(value).map(v => [v[0], convertToObject(v[1])])\n    );\n  } else if (value instanceof Array) {\n    return value.map(v => convertToObject(v));\n  } else if (value instanceof Uint8Array) {\n    return '<binary> ' + value.toString('hex');\n  } else if (typeof value === 'bigint') {\n    return Number(value);\n  } else {\n    return value;\n  }\n}\n\n// Used apathy theme and modified only base00 color.\n// https://github.com/reduxjs/redux-devtools/blob/75322b15ee7ba03fddf10ac3399881e302848874/src/react/themes/apathy.js\nconst jsonTreeTheme = {\n  scheme: 'apathy',\n  author: 'jannik siebert (https://github.com/janniks)',\n  base00: '#faf9f8;',\n  base01: '#0B342D',\n  base02: '#184E45',\n  base03: '#2B685E',\n  base04: '#5F9C92',\n  base05: '#81B5AC',\n  base06: '#A7CEC8',\n  base07: '#D2E7E4',\n  base08: '#3E9688',\n  base09: '#3E7996',\n  base0A: '#3E4C96',\n  base0B: '#883E96',\n  base0C: '#963E4C',\n  base0D: '#96883E',\n  base0E: '#4C963E',\n  base0F: '#3E965B',\n};\n\nconst TransactionPage: React.FC<TransactionPageProps> = ({ location }) => {\n  const [queryString] = useQueryString(location);\n  const id = queryString;\n  return (\n    <TransactionByIdComponent variables={{ id }}>\n      {({ data, loading, error }) => {\n        if (loading)\n          return (\n            <>\n              <h2>Transaction Details</h2>\n              <p>Loading&hellip;</p>\n            </>\n          );\n        if (error)\n          return (\n            <>\n              <h2>Transaction Details</h2>\n              <p>\n                Failed to load {id} - {JSON.stringify(error.message)}\n              </p>\n            </>\n          );\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { transaction } = data!.transactionQuery!;\n        if (!transaction)\n          return (\n            <>\n              <h2>Transaction Details</h2>\n              <p>\n                No such transaction: <code>{id}</code>\n              </p>\n            </>\n          );\n\n        const blockRef =\n          transaction.blockRef === [] || transaction.blockRef === null ? (\n            <p>{'No block references were found.'}</p>\n          ) : (\n            transaction.blockRef.map(block => (\n              <dd key={block.hash}>\n                <Link href={`../block/?${block.hash}`}>{block.hash}</Link>\n              </dd>\n            ))\n          );\n\n        const actions = transaction.actions.map(action => (\n          <dd key={action.raw}>\n            <JSONTree\n              data={convertToObject(decode(Buffer.from(action.raw, 'base64')))}\n              theme={jsonTreeTheme}\n              invertTheme={false}\n              hideRoot={true}\n            />\n          </dd>\n        ));\n\n        // FIXME: We'd better to use absolute paths and make Gatsby to\n        // automatically rebase these absolute paths on the PATH_PREFIX\n        // configuration.\n        const signerLink = `../account/?${transaction.signer}`;\n        return (\n          <>\n            <h2>Transaction Details</h2>\n            <dl>\n              <dt>Id</dt>\n              <dd>\n                <code>{transaction.id}</code>\n              </dd>\n              <dt>Nonce</dt>\n              <dd>{transaction.nonce} </dd>\n              <dt>Public Key</dt>\n              <dd>\n                <code>{transaction.publicKey}</code>\n              </dd>\n              <dt>Signature</dt>\n              <dd>\n                <code>{transaction.signature}</code>\n              </dd>\n              <dt>Signer</dt>\n              <dd>\n                <Link href={signerLink}>\n                  <code>{transaction.signer}</code>\n                </Link>\n              </dd>\n              <dt>Timestamp</dt>\n              <dd>\n                <Timestamp timestamp={transaction.timestamp} />\n              </dd>\n              <dt>Updated Addresses</dt>\n              {transaction.updatedAddresses.map(address => (\n                <dd key={address}>\n                  {/*\n                  FIXME: We'd better to use absolute paths and make Gatsby to\n                  automatically rebase these absolute paths on the PATH_PREFIX\n                  configuration.\n                  */}\n                  <Link href={`../account/?${address}`}>\n                    <code>{address}</code>\n                  </Link>\n                </dd>\n              ))}\n              <dt>Block Reference</dt>\n              {blockRef}\n              <dt>Actions</dt>\n              {actions}\n            </dl>\n          </>\n        );\n      }}\n    </TransactionByIdComponent>\n  );\n};\n\nexport default TransactionPage;\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback(\n    (queryString: string) => {\n      const path = location.pathname.substr(withPrefix('/').length - 1);\n      navigate(path + (queryString ? `?${queryString}` : ''));\n    },\n    [location, navigate]\n  );\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Address: any,\n  ByteString: any,\n  DateTimeOffset: any,\n  Date: any,\n  DateTime: any,\n  Decimal: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport type Action = {\n   __typename?: 'Action',\n  inspection: Scalars['String'],\n  raw: Scalars['String'],\n};\n\n\nexport type ActionRawArgs = {\n  encode?: Maybe<Scalars['String']>\n};\n\n\nexport type Block = {\n   __typename?: 'Block',\n  difficulty: Scalars['Int'],\n  hash: Scalars['ID'],\n  index: Scalars['Int'],\n  miner: Scalars['Address'],\n  nonce: Scalars['ByteString'],\n  previousBlock?: Maybe<Block>,\n  stateRootHash?: Maybe<Scalars['ByteString']>,\n  timestamp: Scalars['DateTimeOffset'],\n  transactions: Array<Transaction>,\n};\n\nexport type BlockQuery = {\n   __typename?: 'BlockQuery',\n  block?: Maybe<Block>,\n  blocks: Array<Block>,\n};\n\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>,\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>,\n  miner?: Maybe<Scalars['Address']>\n};\n\n\n\n\n\n\n\nexport type Query = {\n   __typename?: 'Query',\n  blockQuery?: Maybe<BlockQuery>,\n  transactionQuery?: Maybe<TransactionQuery>,\n};\n\n\nexport type Transaction = {\n   __typename?: 'Transaction',\n  actions: Array<Action>,\n  blockRef?: Maybe<Array<Block>>,\n  id: Scalars['ID'],\n  nonce: Scalars['Int'],\n  publicKey: Scalars['ByteString'],\n  signature: Scalars['ByteString'],\n  signer: Scalars['Address'],\n  timestamp: Scalars['DateTimeOffset'],\n  updatedAddresses: Array<Scalars['Address']>,\n};\n\nexport type TransactionQuery = {\n   __typename?: 'TransactionQuery',\n  transaction?: Maybe<Transaction>,\n  transactions: Array<Transaction>,\n};\n\n\nexport type TransactionQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionQueryTransactionsArgs = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\nexport type BlockCommonFragment = ({ __typename?: 'Block' } & Pick<Block, 'hash' | 'index' | 'difficulty' | 'timestamp'>);\n\nexport type TransactionCommonFragment = ({ __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'nonce' | 'publicKey' | 'signature' | 'signer' | 'timestamp' | 'updatedAddresses'>);\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'],\n  limit: Scalars['Int'],\n  excludeEmptyTxs: Scalars['Boolean'],\n  miner?: Maybe<Scalars['Address']>\n};\n\n\nexport type BlockListQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { blocks: Array<({ __typename?: 'Block' } & Pick<Block, 'miner'> & { previousBlock: Maybe<({ __typename?: 'Block' } & Pick<Block, 'timestamp'>)>, transactions: Array<({ __typename?: 'Transaction' } & Pick<Transaction, 'id'>)> } & BlockCommonFragment)> })> });\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockByHashQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { block: Maybe<({ __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce' | 'stateRootHash'> & { previousBlock: Maybe<({ __typename?: 'Block' } & Pick<Block, 'hash'>)>, transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> } & BlockCommonFragment)> })> });\n\nexport type TransactionListQueryVariables = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc: Scalars['Boolean'],\n  offset: Scalars['Int'],\n  limit: Scalars['Int']\n};\n\n\nexport type TransactionListQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionByIdQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transaction: Maybe<({ __typename?: 'Transaction' } & { actions: Array<({ __typename?: 'Action' } & Pick<Action, 'raw'>)>, blockRef: Maybe<Array<({ __typename?: 'Block' } & BlockCommonFragment)>> } & TransactionCommonFragment)> })> });\n\nexport type TransactionsByAccountQueryVariables = {\n  involvedAddress: Scalars['Address'],\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\n\n\nexport type TransactionsByAccountQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\nexport const BlockCommonFragmentDoc = gql`\n    fragment BlockCommon on Block {\n  hash\n  index\n  difficulty\n  timestamp\n}\n    `;\nexport const TransactionCommonFragmentDoc = gql`\n    fragment TransactionCommon on Transaction {\n  id\n  nonce\n  publicKey\n  signature\n  signer\n  timestamp\n  updatedAddresses\n}\n    `;\nexport const BlockListDocument = gql`\n    query BlockList($offset: Int!, $limit: Int!, $excludeEmptyTxs: Boolean!, $miner: Address) {\n  blockQuery {\n    blocks(desc: true, offset: $offset, limit: $limit, excludeEmptyTxs: $excludeEmptyTxs, miner: $miner) {\n      ...BlockCommon\n      miner\n      previousBlock {\n        timestamp\n      }\n      transactions {\n        id\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockListQuery, BlockListQueryVariables>, 'query'> & ({ variables: BlockListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const BlockListComponent = (props: BlockListComponentProps) => (\n      <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables> query={BlockListDocument} {...props} />\n    );\n    \nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockListQuery, BlockListQueryVariables> & TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockListQuery,\n  BlockListQueryVariables,\n  BlockListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockListQuery, BlockListQueryVariables, BlockListProps<TChildProps>>(BlockListDocument, {\n      alias: 'withBlockList',\n      ...operationOptions\n    });\n};\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<BlockListQuery, BlockListQueryVariables>;\nexport const BlockByHashDocument = gql`\n    query BlockByHash($hash: ID) {\n  blockQuery {\n    block(hash: $hash) {\n      ...BlockCommon\n      miner\n      nonce\n      stateRootHash\n      previousBlock {\n        hash\n      }\n      transactions {\n        ...TransactionCommon\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}\n${TransactionCommonFragmentDoc}`;\nexport type BlockByHashComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockByHashQuery, BlockByHashQueryVariables>, 'query'>;\n\n    export const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n      <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables> query={BlockByHashDocument} {...props} />\n    );\n    \nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockByHashQuery, BlockByHashQueryVariables> & TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockByHashQuery,\n  BlockByHashQueryVariables,\n  BlockByHashProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockByHashQuery, BlockByHashQueryVariables, BlockByHashProps<TChildProps>>(BlockByHashDocument, {\n      alias: 'withBlockByHash',\n      ...operationOptions\n    });\n};\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<BlockByHashQuery, BlockByHashQueryVariables>;\nexport const TransactionListDocument = gql`\n    query TransactionList($signer: Address, $involvedAddress: Address, $desc: Boolean!, $offset: Int!, $limit: Int!) {\n  transactionQuery {\n    transactions(signer: $signer, involvedAddress: $involvedAddress, desc: $desc, offset: $offset, limit: $limit) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionListQuery, TransactionListQueryVariables>, 'query'> & ({ variables: TransactionListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TransactionListComponent = (props: TransactionListComponentProps) => (\n      <ApolloReactComponents.Query<TransactionListQuery, TransactionListQueryVariables> query={TransactionListDocument} {...props} />\n    );\n    \nexport type TransactionListProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionListQuery, TransactionListQueryVariables> & TChildProps;\nexport function withTransactionList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionListQuery,\n  TransactionListQueryVariables,\n  TransactionListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionListQuery, TransactionListQueryVariables, TransactionListProps<TChildProps>>(TransactionListDocument, {\n      alias: 'withTransactionList',\n      ...operationOptions\n    });\n};\nexport type TransactionListQueryResult = ApolloReactCommon.QueryResult<TransactionListQuery, TransactionListQueryVariables>;\nexport const TransactionByIdDocument = gql`\n    query TransactionById($id: ID) {\n  transactionQuery {\n    transaction(id: $id) {\n      ...TransactionCommon\n      actions {\n        raw(encode: \"base64\")\n      }\n      blockRef {\n        ...BlockCommon\n      }\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}\n${BlockCommonFragmentDoc}`;\nexport type TransactionByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionByIdQuery, TransactionByIdQueryVariables>, 'query'>;\n\n    export const TransactionByIdComponent = (props: TransactionByIdComponentProps) => (\n      <ApolloReactComponents.Query<TransactionByIdQuery, TransactionByIdQueryVariables> query={TransactionByIdDocument} {...props} />\n    );\n    \nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionByIdQuery, TransactionByIdQueryVariables> & TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables,\n  TransactionByIdProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionByIdQuery, TransactionByIdQueryVariables, TransactionByIdProps<TChildProps>>(TransactionByIdDocument, {\n      alias: 'withTransactionById',\n      ...operationOptions\n    });\n};\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<TransactionByIdQuery, TransactionByIdQueryVariables>;\nexport const TransactionsByAccountDocument = gql`\n    query TransactionsByAccount($involvedAddress: Address!, $offset: Int, $limit: Int) {\n  transactionQuery {\n    transactions(involvedAddress: $involvedAddress, desc: true, offset: $offset, limit: $limit) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionsByAccountComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>, 'query'> & ({ variables: TransactionsByAccountQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TransactionsByAccountComponent = (props: TransactionsByAccountComponentProps) => (\n      <ApolloReactComponents.Query<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> query={TransactionsByAccountDocument} {...props} />\n    );\n    \nexport type TransactionsByAccountProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> & TChildProps;\nexport function withTransactionsByAccount<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables,\n  TransactionsByAccountProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionsByAccountQuery, TransactionsByAccountQueryVariables, TransactionsByAccountProps<TChildProps>>(TransactionsByAccountDocument, {\n      alias: 'withTransactionsByAccount',\n      ...operationOptions\n    });\n};\nexport type TransactionsByAccountQueryResult = ApolloReactCommon.QueryResult<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>;","import { Scalars } from '../generated/graphql';\nimport React from 'react';\n\ninterface TimestampProps {\n  timestamp: Scalars['DateTimeOffset'];\n}\n\nconst formatOptions: Intl.DateTimeFormatOptions = {\n  hour: '2-digit',\n  minute: '2-digit',\n  year: '2-digit',\n  month: 'numeric',\n  day: 'numeric',\n};\n\nconst Timestamp: React.FC<TimestampProps> = ({ timestamp }) => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  if (\n    now.getFullYear() == date.getFullYear() &&\n    now.getMonth() == date.getMonth() &&\n    now.getDate() == date.getDate()\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { year, month, day, ...timeStyle } = formatOptions;\n    return (\n      <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n        {date.toLocaleString(undefined, timeStyle)}\n      </time>\n    );\n  }\n  return (\n    <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n      {date.toLocaleString(undefined, formatOptions)}\n    </time>\n  );\n};\n\nexport default Timestamp;\n"],"sourceRoot":""}